// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.domain.formdefinition.hibernate;

import java.util.*;
import java.time.OffsetDateTime;
import org.test.aptosformsdemo.domain.*;
import org.hibernate.Session;
import org.hibernate.Criteria;
//import org.hibernate.criterion.Order;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Projections;
import org.hibernate.SessionFactory;
import org.test.aptosformsdemo.domain.formdefinition.*;
import org.test.aptosformsdemo.specialization.*;
import org.test.aptosformsdemo.specialization.hibernate.*;
import org.springframework.transaction.annotation.Transactional;

public class HibernateFormDefinitionStateRepository implements FormDefinitionStateRepository {
    private SessionFactory sessionFactory;

    public SessionFactory getSessionFactory() { return this.sessionFactory; }

    public void setSessionFactory(SessionFactory sessionFactory) { this.sessionFactory = sessionFactory; }

    protected Session getCurrentSession() {
        return this.sessionFactory.getCurrentSession();
    }
    
    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("FormSequenceId", "FormId", "ContractAddress", "StoreAccountAddress", "PageDefinitions", "OffChainVersion", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Active", "Deleted"));
    
    private ReadOnlyProxyGenerator readOnlyProxyGenerator;
    
    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    public FormDefinitionState get(Long id, boolean nullAllowed) {
        FormDefinitionState.SqlFormDefinitionState state = (FormDefinitionState.SqlFormDefinitionState)getCurrentSession().get(AbstractFormDefinitionState.SimpleFormDefinitionState.class, id);
        if (!nullAllowed && state == null) {
            state = new AbstractFormDefinitionState.SimpleFormDefinitionState();
            state.setFormSequenceId(id);
        }
        if (getReadOnlyProxyGenerator() != null && state != null) {
            return (FormDefinitionState) getReadOnlyProxyGenerator().createProxy(state, new Class[]{FormDefinitionState.SqlFormDefinitionState.class, Saveable.class}, "getStateReadOnly", readOnlyPropertyPascalCaseNames);
        }
        return state;
    }

    public void save(FormDefinitionState state) {
        FormDefinitionState s = state;
        if (getReadOnlyProxyGenerator() != null) {
            s = (FormDefinitionState) getReadOnlyProxyGenerator().getTarget(state);
        }
        if(s.getOffChainVersion() == null) {
            getCurrentSession().save(s);
        } else {
            getCurrentSession().update(s);
        }

        if (s instanceof Saveable)
        {
            Saveable saveable = (Saveable) s;
            saveable.save();
        }
        getCurrentSession().flush();
    }

    public void merge(FormDefinitionState detached) {
        FormDefinitionState persistent = getCurrentSession().get(AbstractFormDefinitionState.SimpleFormDefinitionState.class, detached.getFormSequenceId());
        if (persistent != null) {
            merge(persistent, detached);
            getCurrentSession().merge(detached);
        } else {
            getCurrentSession().save(detached);
        }
        getCurrentSession().flush();
    }

    private void merge(FormDefinitionState persistent, FormDefinitionState detached) {
        ((FormDefinitionState.MutableFormDefinitionState) detached).setOffChainVersion(persistent.getOffChainVersion());
        if (detached.getPageDefinitions() != null) {
            removeNonExistentPageDefinitions(persistent.getPageDefinitions(), detached.getPageDefinitions());
            for (FormPageDefinitionState d : detached.getPageDefinitions()) {
                FormPageDefinitionState p = persistent.getPageDefinitions().get(d.getPageNumber());
                if (p == null)
                    getCurrentSession().save(d);
                else
                    merge(p, d);
            }
        }
    }

    private void merge(FormPageDefinitionState persistent, FormPageDefinitionState detached) {
        ((FormPageDefinitionState.MutableFormPageDefinitionState) detached).setOffChainVersion(persistent.getOffChainVersion());
    }

    private void removeNonExistentPageDefinitions(EntityStateCollection<Integer, FormPageDefinitionState> persistentCollection, EntityStateCollection<Integer, FormPageDefinitionState> detachedCollection) {
        Set<Integer> removedIds = persistentCollection.stream().map(i -> i.getPageNumber()).collect(java.util.stream.Collectors.toSet());
        detachedCollection.forEach(i -> removedIds.remove(i.getPageNumber()));
        for (Integer i : removedIds) {
            FormPageDefinitionState s = persistentCollection.get(i);
            persistentCollection.remove(s);
            getCurrentSession().delete(s);
        }
    }

}

