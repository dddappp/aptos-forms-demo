// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.aptos.contract.taskservice;

import org.test.aptosformsdemo.aptos.contract.repository.*;
import org.test.aptosformsdemo.aptos.contract.service.*;
import org.test.aptosformsdemo.aptos.contract.ContractModuleNameProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.test.aptosformsdemo.domain.formdefinition.FormDefinitionState;
import org.test.aptosformsdemo.domain.formdefinition.FormDefinitionStateQueryRepository;
import org.test.aptosformsdemo.domain.formdefinition.FormPageDefinitionState;

import static org.test.aptosformsdemo.aptos.contract.taskservice.PullAptosFormsDemoMainFormEventsTaskService.getAptosFormsDemoMainFormModuleNameProvider;
import static org.test.aptosformsdemo.aptos.contract.taskservice.PullAptosFormsDemoMainFormEventsTaskService.getToFormPageAndAddressFunction;

@Service
public class UpdateAptosFormsDemoMainFormStateTaskService {

    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private AptosAptosFormsDemoMainFormService aptosAptosFormsDemoMainFormService;

    @Autowired
    private AptosFormsDemoMainFormEventRepository aptosFormsDemoMainFormEventRepository;

    @Autowired
    private AptosFormsDemoMainFormEventService aptosFormsDemoMainFormEventService;

    @Autowired
    private FormDefinitionStateQueryRepository formDefinitionStateQueryRepository;

    @Scheduled(fixedDelayString = "${aptos.contract.update-aptos-forms-demo-main-form-states.fixed-delay:5000}")
    @Transactional
    public void updateAptosFormsDemoMainFormStates() {
        aptosFormsDemoMainFormEventRepository.findByStatusIsNull().forEach(e -> {
            final long formSequenceId = e.getAptosFormsDemoMainFormEventId().getFormPageAndSignerAddress().getFormSequenceId();
            final int pageNumber = e.getAptosFormsDemoMainFormEventId().getFormPageAndSignerAddress().getPageNumber();
            FormDefinitionState formDefinitionState = formDefinitionStateQueryRepository.get(formSequenceId);
            if (formDefinitionState == null) { return; }
            FormPageDefinitionState formPageDefinitionState = formDefinitionState.getPageDefinitions().get(pageNumber);
            if (formPageDefinitionState == null) { return; }
            String moduleName = ContractModuleNameProvider.toUnderscoreName(formDefinitionState.getFormId() + formPageDefinitionState.getPageName(), true);
            aptosAptosFormsDemoMainFormService.updateAptosFormsDemoMainFormState(
                    getAptosFormsDemoMainFormModuleNameProvider(moduleName, formDefinitionState, formPageDefinitionState),
                    getToFormPageAndAddressFunction(formDefinitionState.getFormSequenceId(), formPageDefinitionState.getPageNumber()),
                    e.getFormPageAndSignerAddress().getAddress()
            );
            aptosFormsDemoMainFormEventService.updateStatusToProcessed(e);
        });
    }

}
