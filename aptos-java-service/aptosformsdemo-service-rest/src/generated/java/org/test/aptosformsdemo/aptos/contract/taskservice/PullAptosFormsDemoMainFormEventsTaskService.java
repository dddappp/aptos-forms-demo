// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.aptos.contract.taskservice;

import org.test.aptosformsdemo.aptos.contract.ContractModuleNameProviderUtils;
import org.test.aptosformsdemo.aptos.contract.service.AptosFormsDemoMainFormEventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import org.test.aptosformsdemo.aptos.contract.repository.AptosAccountRepository;
import org.test.aptosformsdemo.aptos.contract.ContractModuleNameProvider;
import org.test.aptosformsdemo.domain.FormPageAndAddress;
import org.test.aptosformsdemo.domain.formdefinition.FormDefinitionState;
import org.test.aptosformsdemo.domain.formdefinition.FormDefinitionStateQueryRepository;
import org.test.aptosformsdemo.domain.formdefinition.FormPageDefinitionState;

import java.util.HashMap;

@Service
public class PullAptosFormsDemoMainFormEventsTaskService {

    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private AptosFormsDemoMainFormEventService aptosFormsDemoMainFormEventService;

    @Autowired
    private FormDefinitionStateQueryRepository formDefinitionStateQueryRepository;


    @Scheduled(fixedDelayString = "${aptos.contract.pull-aptos-forms-demo-main-form-events.aptos-forms-demo-main-form-submitted.fixed-delay:5000}")
    public void pullAptosFormsDemoMainFormSubmittedEvents() {
        FormDefinitionState formDefinitionState = getFirstFormDefinitionState(); //todo only for test
        if (formDefinitionState == null) { return; }
        FormPageDefinitionState formPageDefinitionState = formDefinitionState.getPageDefinitions().get(1);
        if (formPageDefinitionState == null) { return; }
        String moduleName = ContractModuleNameProvider.toUnderscoreName(formDefinitionState.getFormId() + formPageDefinitionState.getPageName(), true);
        aptosFormsDemoMainFormEventService.pullAptosFormsDemoMainFormSubmittedEvents(
                getAptosFormsDemoMainFormModuleNameProvider(moduleName, formDefinitionState, formPageDefinitionState),
                getToFormPageAndAddressFunction(formDefinitionState.getFormSequenceId(), formPageDefinitionState.getPageNumber())
        );
    }

    @Scheduled(fixedDelayString = "${aptos.contract.pull-aptos-forms-demo-main-form-events.aptos-forms-demo-main-form-updated.fixed-delay:5000}")
    public void pullAptosFormsDemoMainFormUpdatedEvents() {
        FormDefinitionState formDefinitionState = getFirstFormDefinitionState();
        if (formDefinitionState == null) { return; }
        FormPageDefinitionState formPageDefinitionState = formDefinitionState.getPageDefinitions().get(1);
        if (formPageDefinitionState == null) { return; }
        String moduleName = ContractModuleNameProvider.toUnderscoreName(formDefinitionState.getFormId() + formPageDefinitionState.getPageName(), true);
        aptosFormsDemoMainFormEventService.pullAptosFormsDemoMainFormUpdatedEvents(
                getAptosFormsDemoMainFormModuleNameProvider(moduleName, formDefinitionState, formPageDefinitionState),
                getToFormPageAndAddressFunction(formDefinitionState.getFormSequenceId(), formPageDefinitionState.getPageNumber())
        );
    }

    private FormDefinitionState getFirstFormDefinitionState() {
        java.util.Map<String, Object> filter = new HashMap<>();
        java.util.List<String> orders = new java.util.ArrayList<>();
        orders.add("formSequenceId");
        FormDefinitionState formDefinitionState = formDefinitionStateQueryRepository.getFirst(filter.entrySet(), orders);
        return formDefinitionState;
    }

    public static java.util.function.Function<String, FormPageAndAddress> getToFormPageAndAddressFunction(final long formSequenceId, final int pageNumber) {
        return (address) -> {
            FormPageAndAddress formPageAndAddress = new FormPageAndAddress();
            formPageAndAddress.setFormSequenceId(formSequenceId);
            formPageAndAddress.setPageNumber(pageNumber);
            formPageAndAddress.setAddress(address);
            return formPageAndAddress;
        };
    }

    public static ContractModuleNameProvider getAptosFormsDemoMainFormModuleNameProvider(final String moduleName, final FormDefinitionState formDefinitionState, final FormPageDefinitionState formPageDefinitionState) {
        final String contractAddress = formDefinitionState.getContractAddress();
        final String storeAccountAddress = formDefinitionState.getStoreAccountAddress();
        final String aptosFormsDemoMainFormSubmittedStructName =  formPageDefinitionState.getMoveSubmitEventStructName();
        final String aptosFormsDemoMainFormUpdatedStructName = formPageDefinitionState.getMoveUpdateEventStructName();
        final String aptosFormsDemoMainFormSubmittedHandleFieldName = formPageDefinitionState.getMoveSubmitEventHandleFieldName();
        final String aptosFormsDemoMainFormUpdatedHandleFieldName = formPageDefinitionState.getMoveUpdateEventHandleFieldName();
        final String stateTableFieldName = formPageDefinitionState.getMoveStateTableFieldName();
        final String stateStructName = formPageDefinitionState.getMoveStateStructName();
        return ContractModuleNameProviderUtils.getAptosFormsDemoMainFormModuleNameProvider(
                moduleName,
                contractAddress, storeAccountAddress,
                aptosFormsDemoMainFormSubmittedStructName, aptosFormsDemoMainFormUpdatedStructName,
                aptosFormsDemoMainFormSubmittedHandleFieldName, aptosFormsDemoMainFormUpdatedHandleFieldName,
                stateTableFieldName, stateStructName
        );
    }

}
