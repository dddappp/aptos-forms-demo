// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.aptos.contract;

public class ContractModuleNameProviderUtils {
    private ContractModuleNameProviderUtils() {
    }

    public static ContractModuleNameProvider getAptosFormsDemoMainFormModuleNameProvider(
            final String moduleName,
            final String contractAddress,
            final String storeAccountAddress,
            final String aptosFormsDemoMainFormSubmittedStructName,
            final String aptosFormsDemoMainFormUpdatedStructName,
            final String aptosFormsDemoMainFormSubmittedHandleFieldName,
            final String aptosFormsDemoMainFormUpdatedHandleFieldName,
            final String stateTableFieldName,
            final String stateStructName
    ) {
        ContractModuleNameProvider contractModuleNameProvider = new ContractModuleNameProvider() {
            @Override
            public String getModuleQualifiedEventStructName(String eventCategory) {
                if ("AptosFormsDemoMainFormSubmitted".equals(eventCategory)) {
                    return moduleName + "::" + aptosFormsDemoMainFormSubmittedStructName;
                }
                if ("AptosFormsDemoMainFormUpdated".equals(eventCategory)) {
                    return moduleName + "::" + aptosFormsDemoMainFormUpdatedStructName;
                }
                throw new IllegalArgumentException("Unknown event category: " + eventCategory);
            }

            @Override
            public String getEventHandleFieldName(String eventCategory) {
                if ("AptosFormsDemoMainFormSubmitted".equals(eventCategory)) {
                    return aptosFormsDemoMainFormSubmittedHandleFieldName;
                }
                if ("AptosFormsDemoMainFormUpdated".equals(eventCategory)) {
                    return aptosFormsDemoMainFormUpdatedHandleFieldName;
                }
                throw new IllegalArgumentException("Unknown event category: " + eventCategory);
            }

            @Override
            public String getStateTableFieldName() {
                return stateTableFieldName;
            }

            @Override
            public String getModuleQualifiedEntityStateStructName() {
                return moduleName + "::" + stateStructName;
            }

            @Override
            public String getModuleQualifiedTablesStructName() {
                return moduleName + "::Tables";
            }

            @Override
            public String getModuleQualifiedEventsStructName() {
                return moduleName + "::Events";
            }

            @Override
            public String getContractAddress() {
                return contractAddress;
            }

            @Override
            public String getStoreAccountAddress() {
                return storeAccountAddress;
            }
        };
        return contractModuleNameProvider;
    }

    public static ContractModuleNameProvider getAptosFormsDemoCoin_claimer_1ModuleNameProvider(
            final String moduleName,
            final String contractAddress,
            final String storeAccountAddress,
            final String aptosFormsDemoCoin_claimer_1_ClaimedStructName,
            final String aptosFormsDemoCoin_claimer_1_ClaimedHandleFieldName,
            final String stateTableFieldName,
            final String stateStructName
    ) {
        ContractModuleNameProvider contractModuleNameProvider = new ContractModuleNameProvider() {
            @Override
            public String getModuleQualifiedEventStructName(String eventCategory) {
                if ("AptosFormsDemoCoin_claimer_1_Claimed".equals(eventCategory)) {
                    return moduleName + "::" + aptosFormsDemoCoin_claimer_1_ClaimedStructName;
                }
                throw new IllegalArgumentException("Unknown event category: " + eventCategory);
            }

            @Override
            public String getEventHandleFieldName(String eventCategory) {
                if ("AptosFormsDemoCoin_claimer_1_Claimed".equals(eventCategory)) {
                    return aptosFormsDemoCoin_claimer_1_ClaimedHandleFieldName;
                }
                throw new IllegalArgumentException("Unknown event category: " + eventCategory);
            }

            @Override
            public String getStateTableFieldName() {
                return stateTableFieldName;
            }

            @Override
            public String getModuleQualifiedEntityStateStructName() {
                return moduleName + "::" + stateStructName;
            }

            @Override
            public String getModuleQualifiedTablesStructName() {
                return moduleName + "::Tables";
            }

            @Override
            public String getModuleQualifiedEventsStructName() {
                return moduleName + "::Events";
            }

            @Override
            public String getContractAddress() {
                return contractAddress;
            }

            @Override
            public String getStoreAccountAddress() {
                return storeAccountAddress;
            }
        };
        return contractModuleNameProvider;
    }

    public static ContractModuleNameProvider getAptosFormsDemoGlobalModuleNameProvider(
            final String moduleName,
            final String contractAddress,
            final String storeAccountAddress,
            final String payment_123_VaultDepositedStructName,
            final String payment_123_VaultWithdrawnStructName,
            final String payment_123_VaultAdminWithdrawnStructName,
            final String coin_claimer_1_VaultDepositedStructName,
            final String coin_claimer_1_VaultWithdrawnStructName,
            final String coin_claimer_1_VaultAdminWithdrawnStructName,
            final String aptosFormsDemoGlobalInitializedStructName,
            final String payment_123_VaultDepositedHandleFieldName,
            final String payment_123_VaultWithdrawnHandleFieldName,
            final String payment_123_VaultAdminWithdrawnHandleFieldName,
            final String coin_claimer_1_VaultDepositedHandleFieldName,
            final String coin_claimer_1_VaultWithdrawnHandleFieldName,
            final String coin_claimer_1_VaultAdminWithdrawnHandleFieldName,
            final String aptosFormsDemoGlobalInitializedHandleFieldName,
            final String stateTableFieldName,
            final String stateStructName
    ) {
        ContractModuleNameProvider contractModuleNameProvider = new ContractModuleNameProvider() {
            @Override
            public String getModuleQualifiedEventStructName(String eventCategory) {
                if ("Payment_123_VaultDeposited".equals(eventCategory)) {
                    return moduleName + "::" + payment_123_VaultDepositedStructName;
                }
                if ("Payment_123_VaultWithdrawn".equals(eventCategory)) {
                    return moduleName + "::" + payment_123_VaultWithdrawnStructName;
                }
                if ("Payment_123_VaultAdminWithdrawn".equals(eventCategory)) {
                    return moduleName + "::" + payment_123_VaultAdminWithdrawnStructName;
                }
                if ("Coin_claimer_1_VaultDeposited".equals(eventCategory)) {
                    return moduleName + "::" + coin_claimer_1_VaultDepositedStructName;
                }
                if ("Coin_claimer_1_VaultWithdrawn".equals(eventCategory)) {
                    return moduleName + "::" + coin_claimer_1_VaultWithdrawnStructName;
                }
                if ("Coin_claimer_1_VaultAdminWithdrawn".equals(eventCategory)) {
                    return moduleName + "::" + coin_claimer_1_VaultAdminWithdrawnStructName;
                }
                if ("AptosFormsDemoGlobalInitialized".equals(eventCategory)) {
                    return moduleName + "::" + aptosFormsDemoGlobalInitializedStructName;
                }
                throw new IllegalArgumentException("Unknown event category: " + eventCategory);
            }

            @Override
            public String getEventHandleFieldName(String eventCategory) {
                if ("Payment_123_VaultDeposited".equals(eventCategory)) {
                    return payment_123_VaultDepositedHandleFieldName;
                }
                if ("Payment_123_VaultWithdrawn".equals(eventCategory)) {
                    return payment_123_VaultWithdrawnHandleFieldName;
                }
                if ("Payment_123_VaultAdminWithdrawn".equals(eventCategory)) {
                    return payment_123_VaultAdminWithdrawnHandleFieldName;
                }
                if ("Coin_claimer_1_VaultDeposited".equals(eventCategory)) {
                    return coin_claimer_1_VaultDepositedHandleFieldName;
                }
                if ("Coin_claimer_1_VaultWithdrawn".equals(eventCategory)) {
                    return coin_claimer_1_VaultWithdrawnHandleFieldName;
                }
                if ("Coin_claimer_1_VaultAdminWithdrawn".equals(eventCategory)) {
                    return coin_claimer_1_VaultAdminWithdrawnHandleFieldName;
                }
                if ("AptosFormsDemoGlobalInitialized".equals(eventCategory)) {
                    return aptosFormsDemoGlobalInitializedHandleFieldName;
                }
                throw new IllegalArgumentException("Unknown event category: " + eventCategory);
            }

            @Override
            public String getStateTableFieldName() {
                return stateTableFieldName;
            }

            @Override
            public String getModuleQualifiedEntityStateStructName() {
                return moduleName + "::" + stateStructName;
            }

            @Override
            public String getModuleQualifiedTablesStructName() {
                return moduleName + "::Tables";
            }

            @Override
            public String getModuleQualifiedEventsStructName() {
                return moduleName + "::Events";
            }

            @Override
            public String getContractAddress() {
                return contractAddress;
            }

            @Override
            public String getStoreAccountAddress() {
                return storeAccountAddress;
            }
        };
        return contractModuleNameProvider;
    }

}
