// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.domain.formidregistration;

import java.util.*;
import java.time.OffsetDateTime;
import org.test.aptosformsdemo.domain.*;
import org.test.aptosformsdemo.domain.Command;
import org.test.aptosformsdemo.specialization.DomainError;

public interface FormIdRegistrationCommand extends Command {

    Long getFormSequenceId();

    void setFormSequenceId(Long formSequenceId);

    Long getOffChainVersion();

    void setOffChainVersion(Long offChainVersion);

    static void throwOnInvalidStateTransition(FormIdRegistrationState state, Command c) {
        if (state.getOffChainVersion() == null) {
            if (isCreationCommand((FormIdRegistrationCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCreationCommand((FormIdRegistrationCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCreationCommand(FormIdRegistrationCommand c) {
        if ((c instanceof FormIdRegistrationCommand.CreateFormIdRegistration) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getOffChainVersion().equals(FormIdRegistrationState.VERSION_NULL)))
            return true;
        if ((c instanceof FormIdRegistrationCommand.MergePatchFormIdRegistration))
            return false;
        if ((c instanceof FormIdRegistrationCommand.DeleteFormIdRegistration))
            return false;
        if (c.getCommandType() != null) {
            String commandType = c.getCommandType();
        }

        if (c.getOffChainVersion().equals(FormIdRegistrationState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchFormIdRegistration extends FormIdRegistrationCommand
    {

        String getFormId();

        void setFormId(String formId);

        Boolean getActive();

        void setActive(Boolean active);

    }

    interface CreateFormIdRegistration extends CreateOrMergePatchFormIdRegistration
    {
    }

    interface MergePatchFormIdRegistration extends CreateOrMergePatchFormIdRegistration
    {
        Boolean getIsPropertyFormIdRemoved();

        void setIsPropertyFormIdRemoved(Boolean removed);

        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);


    }

    interface DeleteFormIdRegistration extends FormIdRegistrationCommand
    {
    }

}

