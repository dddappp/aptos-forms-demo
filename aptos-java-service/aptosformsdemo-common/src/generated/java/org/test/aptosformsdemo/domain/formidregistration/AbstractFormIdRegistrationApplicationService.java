// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.domain.formidregistration;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.time.OffsetDateTime;
import org.test.aptosformsdemo.domain.*;
import org.test.aptosformsdemo.specialization.*;

public abstract class AbstractFormIdRegistrationApplicationService implements FormIdRegistrationApplicationService {
    private FormIdRegistrationStateRepository stateRepository;

    protected FormIdRegistrationStateRepository getStateRepository() {
        return stateRepository;
    }

    private FormIdRegistrationStateQueryRepository stateQueryRepository;

    protected FormIdRegistrationStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    public AbstractFormIdRegistrationApplicationService(FormIdRegistrationStateRepository stateRepository, FormIdRegistrationStateQueryRepository stateQueryRepository) {
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public Long createWithoutId(FormIdRegistrationCommand.CreateFormIdRegistration c) {
        /*
        Long idObj = getIdGenerator().generateId(c);
        FormIdRegistrationState state = getStateRepository().get(idObj, true);
        if (state != null) {
            if (getIdGenerator().isArbitraryIdEnabled()) {
                idObj = getIdGenerator().getNextId();
            } else {
                throw DomainError.named("instanceExist", "the instance already exist, Id: %1$s , aggregate name: %2$s ", idObj, "FormIdRegistration");
            }
        }
        c.setFormSequenceId(idObj);
        when(c);
        return idObj;
   
        */
        return null;
    }

    public void when(FormIdRegistrationCommand.CreateFormIdRegistration c) {
        update(c, s -> {
        // //////////////////////////
        throwOnConcurrencyConflict(s, c);
        ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setFormId(c.getFormId());
        ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setActive(c.getActive());
        ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setDeleted(false);
        ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setCreatedBy(c.getRequesterId());
        ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setCommandId(c.getCommandId());
        // //////////////////////////
        });
    }

    public void when(FormIdRegistrationCommand.MergePatchFormIdRegistration c) {
        update(c, s -> {
        // //////////////////////////////////
        throwOnConcurrencyConflict(s, c);
        if (c.getFormId() == null) {
            if (c.getIsPropertyFormIdRemoved() != null && c.getIsPropertyFormIdRemoved()) {
                ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setFormId(null);
            }
        } else {
            ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setFormId(c.getFormId());
        }
        if (c.getActive() == null) {
            if (c.getIsPropertyActiveRemoved() != null && c.getIsPropertyActiveRemoved()) {
                ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setActive(null);
            }
        } else {
            ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setActive(c.getActive());
        }
        ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setUpdatedBy(c.getRequesterId());
        ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setUpdatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        ((FormIdRegistrationState.SqlFormIdRegistrationState)s).setCommandId(c.getCommandId());
        // //////////////////////////////////
        });
    }

    public void when(FormIdRegistrationCommand.DeleteFormIdRegistration c) {
        update(c, s -> {
        throwOnConcurrencyConflict(s, c);
        // ///////////////////////////////////
        //todo
        // ///////////////////////////////////
        });
    }

    public FormIdRegistrationState get(Long id) {
        FormIdRegistrationState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<FormIdRegistrationState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<FormIdRegistrationState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<FormIdRegistrationState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<FormIdRegistrationState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public EventStoreAggregateId toEventStoreAggregateId(Long aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(FormIdRegistrationCommand c, Consumer<FormIdRegistrationState> action) {
        Long aggregateId = c.getFormSequenceId();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        FormIdRegistrationState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        FormIdRegistrationCommand.throwOnInvalidStateTransition(state, c);
        action.accept(state);
        persist(eventStoreAggregateId, c.getOffChainVersion() == null ? FormIdRegistrationState.VERSION_NULL : c.getOffChainVersion(), state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, FormIdRegistrationState state) {
        getStateRepository().save(state);
    }

    protected boolean isDuplicateCommand(FormIdRegistrationCommand command, EventStoreAggregateId eventStoreAggregateId, FormIdRegistrationState state) {
        boolean duplicate = false;
        if (command.getOffChainVersion() == null) { command.setOffChainVersion(FormIdRegistrationState.VERSION_NULL); }
        if (state.getOffChainVersion() != null && state.getOffChainVersion() == command.getOffChainVersion() + 1) {
            if (command.getCommandId() != null && command.getCommandId().equals(state.getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    protected static void throwOnConcurrencyConflict(FormIdRegistrationState s, FormIdRegistrationCommand c) {
        Long stateVersion = s.getOffChainVersion();
        Long commandVersion = c.getOffChainVersion();
        if (commandVersion == null) { commandVersion = FormIdRegistrationState.VERSION_NULL; }
        if (!(stateVersion == null && commandVersion.equals(FormIdRegistrationState.VERSION_NULL)) && !commandVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and command version (%2$s)", stateVersion, commandVersion);
        }
    }

    public static class SimpleFormIdRegistrationApplicationService extends AbstractFormIdRegistrationApplicationService {
        public SimpleFormIdRegistrationApplicationService(FormIdRegistrationStateRepository stateRepository, FormIdRegistrationStateQueryRepository stateQueryRepository)
        {
            super(stateRepository, stateQueryRepository);
        }
    }

}

