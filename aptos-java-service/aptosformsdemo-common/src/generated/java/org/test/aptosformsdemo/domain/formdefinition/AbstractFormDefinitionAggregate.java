// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.domain.formdefinition;

import java.util.*;
import java.time.OffsetDateTime;
import org.test.aptosformsdemo.domain.*;
import org.test.aptosformsdemo.specialization.*;

public abstract class AbstractFormDefinitionAggregate extends AbstractAggregate implements FormDefinitionAggregate {
    private FormDefinitionState.MutableFormDefinitionState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractFormDefinitionAggregate(FormDefinitionState state) {
        this.state = (FormDefinitionState.MutableFormDefinitionState)state;
    }

    public FormDefinitionState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void create(FormDefinitionCommand.CreateFormDefinition c) {
        if (c.getOffChainVersion() == null) { c.setOffChainVersion(FormDefinitionState.VERSION_NULL); }
        FormDefinitionEvent e = map(c);
        apply(e);
    }

    public void mergePatch(FormDefinitionCommand.MergePatchFormDefinition c) {
        FormDefinitionEvent e = map(c);
        apply(e);
    }

    public void delete(FormDefinitionCommand.DeleteFormDefinition c) {
        FormDefinitionEvent e = map(c);
        apply(e);
    }

    public void throwOnInvalidStateTransition(Command c) {
        FormDefinitionCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }

    protected FormDefinitionEvent map(FormDefinitionCommand.CreateFormDefinition c) {
        FormDefinitionEventId stateEventId = new FormDefinitionEventId(c.getFormSequenceId(), c.getOffChainVersion());
        FormDefinitionEvent.FormDefinitionStateCreated e = newFormDefinitionStateCreated(stateEventId);
        e.setFormId(c.getFormId());
        e.setContractAddress(c.getContractAddress());
        e.setStoreAccountAddress(c.getStoreAccountAddress());
        e.setActive(c.getActive());
        ((AbstractFormDefinitionEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long offChainVersion = c.getOffChainVersion();
        for (FormPageDefinitionCommand.CreateFormPageDefinition innerCommand : c.getCreateFormPageDefinitionCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            FormPageDefinitionEvent.FormPageDefinitionStateCreated innerEvent = mapCreate(innerCommand, c, offChainVersion, this.state);
            e.addFormPageDefinitionEvent(innerEvent);
        }

        return e;
    }

    protected FormDefinitionEvent map(FormDefinitionCommand.MergePatchFormDefinition c) {
        FormDefinitionEventId stateEventId = new FormDefinitionEventId(c.getFormSequenceId(), c.getOffChainVersion());
        FormDefinitionEvent.FormDefinitionStateMergePatched e = newFormDefinitionStateMergePatched(stateEventId);
        e.setFormId(c.getFormId());
        e.setContractAddress(c.getContractAddress());
        e.setStoreAccountAddress(c.getStoreAccountAddress());
        e.setActive(c.getActive());
        e.setIsPropertyFormIdRemoved(c.getIsPropertyFormIdRemoved());
        e.setIsPropertyContractAddressRemoved(c.getIsPropertyContractAddressRemoved());
        e.setIsPropertyStoreAccountAddressRemoved(c.getIsPropertyStoreAccountAddressRemoved());
        e.setIsPropertyActiveRemoved(c.getIsPropertyActiveRemoved());
        ((AbstractFormDefinitionEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        Long offChainVersion = c.getOffChainVersion();
        for (FormPageDefinitionCommand innerCommand : c.getFormPageDefinitionCommands()) {
            throwOnInconsistentCommands(c, innerCommand);
            FormPageDefinitionEvent innerEvent = map(innerCommand, c, offChainVersion, this.state);
            e.addFormPageDefinitionEvent(innerEvent);
        }

        return e;
    }

    protected FormDefinitionEvent map(FormDefinitionCommand.DeleteFormDefinition c) {
        FormDefinitionEventId stateEventId = new FormDefinitionEventId(c.getFormSequenceId(), c.getOffChainVersion());
        FormDefinitionEvent.FormDefinitionStateDeleted e = newFormDefinitionStateDeleted(stateEventId);
        ((AbstractFormDefinitionEvent)e).setCommandId(c.getCommandId());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }


    protected FormPageDefinitionEvent map(FormPageDefinitionCommand c, FormDefinitionCommand outerCommand, Long offChainVersion, FormDefinitionState outerState) {
        FormPageDefinitionCommand.CreateFormPageDefinition create = (c.getCommandType().equals(CommandType.CREATE)) ? ((FormPageDefinitionCommand.CreateFormPageDefinition)c) : null;
        if(create != null) {
            return mapCreate(create, outerCommand, offChainVersion, outerState);
        }

        FormPageDefinitionCommand.MergePatchFormPageDefinition merge = (c.getCommandType().equals(CommandType.MERGE_PATCH)) ? ((FormPageDefinitionCommand.MergePatchFormPageDefinition)c) : null;
        if(merge != null) {
            return mapMergePatch(merge, outerCommand, offChainVersion, outerState);
        }

        FormPageDefinitionCommand.RemoveFormPageDefinition remove = (c.getCommandType().equals(CommandType.REMOVE)) ? ((FormPageDefinitionCommand.RemoveFormPageDefinition)c) : null;
        if (remove != null) {
            return mapRemove(remove, outerCommand, offChainVersion, outerState);
        }
        throw new UnsupportedOperationException();
    }

    protected FormPageDefinitionEvent.FormPageDefinitionStateCreated mapCreate(FormPageDefinitionCommand.CreateFormPageDefinition c, FormDefinitionCommand outerCommand, Long offChainVersion, FormDefinitionState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        FormPageDefinitionEventId stateEventId = new FormPageDefinitionEventId(outerState.getFormSequenceId(), c.getPageNumber(), offChainVersion);
        FormPageDefinitionEvent.FormPageDefinitionStateCreated e = newFormPageDefinitionStateCreated(stateEventId);
        FormPageDefinitionState s = ((EntityStateCollection.ModifiableEntityStateCollection<Integer, FormPageDefinitionState>)outerState.getPageDefinitions()).getOrAdd(c.getPageNumber());

        e.setPageName(c.getPageName());
        e.setMoveStateTableFieldName(c.getMoveStateTableFieldName());
        e.setMoveStateStructName(c.getMoveStateStructName());
        e.setMoveSubmitEventHandleFieldName(c.getMoveSubmitEventHandleFieldName());
        e.setMoveUpdateEventHandleFieldName(c.getMoveUpdateEventHandleFieldName());
        e.setMoveSubmitEventStructName(c.getMoveSubmitEventStructName());
        e.setMoveUpdateEventStructName(c.getMoveUpdateEventStructName());
        e.setActive(c.getActive());
        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(ICreate... ////////////////////////////

    protected FormPageDefinitionEvent.FormPageDefinitionStateMergePatched mapMergePatch(FormPageDefinitionCommand.MergePatchFormPageDefinition c, FormDefinitionCommand outerCommand, Long offChainVersion, FormDefinitionState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        FormPageDefinitionEventId stateEventId = new FormPageDefinitionEventId(outerState.getFormSequenceId(), c.getPageNumber(), offChainVersion);
        FormPageDefinitionEvent.FormPageDefinitionStateMergePatched e = newFormPageDefinitionStateMergePatched(stateEventId);
        FormPageDefinitionState s = ((EntityStateCollection.ModifiableEntityStateCollection<Integer, FormPageDefinitionState>)outerState.getPageDefinitions()).getOrAdd(c.getPageNumber());

        e.setPageName(c.getPageName());
        e.setMoveStateTableFieldName(c.getMoveStateTableFieldName());
        e.setMoveStateStructName(c.getMoveStateStructName());
        e.setMoveSubmitEventHandleFieldName(c.getMoveSubmitEventHandleFieldName());
        e.setMoveUpdateEventHandleFieldName(c.getMoveUpdateEventHandleFieldName());
        e.setMoveSubmitEventStructName(c.getMoveSubmitEventStructName());
        e.setMoveUpdateEventStructName(c.getMoveUpdateEventStructName());
        e.setActive(c.getActive());
        e.setIsPropertyPageNameRemoved(c.getIsPropertyPageNameRemoved());
        e.setIsPropertyMoveStateTableFieldNameRemoved(c.getIsPropertyMoveStateTableFieldNameRemoved());
        e.setIsPropertyMoveStateStructNameRemoved(c.getIsPropertyMoveStateStructNameRemoved());
        e.setIsPropertyMoveSubmitEventHandleFieldNameRemoved(c.getIsPropertyMoveSubmitEventHandleFieldNameRemoved());
        e.setIsPropertyMoveUpdateEventHandleFieldNameRemoved(c.getIsPropertyMoveUpdateEventHandleFieldNameRemoved());
        e.setIsPropertyMoveSubmitEventStructNameRemoved(c.getIsPropertyMoveSubmitEventStructNameRemoved());
        e.setIsPropertyMoveUpdateEventStructNameRemoved(c.getIsPropertyMoveUpdateEventStructNameRemoved());
        e.setIsPropertyActiveRemoved(c.getIsPropertyActiveRemoved());

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IMergePatch... ////////////////////////////

    protected FormPageDefinitionEvent.FormPageDefinitionStateRemoved mapRemove(FormPageDefinitionCommand.RemoveFormPageDefinition c, FormDefinitionCommand outerCommand, Long offChainVersion, FormDefinitionState outerState) {
        ((AbstractCommand)c).setRequesterId(outerCommand.getRequesterId());
        FormPageDefinitionEventId stateEventId = new FormPageDefinitionEventId(outerState.getFormSequenceId(), c.getPageNumber(), offChainVersion);
        FormPageDefinitionEvent.FormPageDefinitionStateRemoved e = newFormPageDefinitionStateRemoved(stateEventId);

        e.setCreatedBy(c.getRequesterId());
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

        return e;

    }// END map(IRemove... ////////////////////////////

    protected void throwOnInconsistentCommands(FormDefinitionCommand command, FormPageDefinitionCommand innerCommand) {
        AbstractFormDefinitionCommand properties = command instanceof AbstractFormDefinitionCommand ? (AbstractFormDefinitionCommand) command : null;
        AbstractFormPageDefinitionCommand innerProperties = innerCommand instanceof AbstractFormPageDefinitionCommand ? (AbstractFormPageDefinitionCommand) innerCommand : null;
        if (properties == null || innerProperties == null) { return; }
        String outerFormSequenceIdName = "FormSequenceId";
        Long outerFormSequenceIdValue = properties.getFormSequenceId();
        String innerFormDefinitionFormSequenceIdName = "FormDefinitionFormSequenceId";
        Long innerFormDefinitionFormSequenceIdValue = innerProperties.getFormDefinitionFormSequenceId();
        if (innerFormDefinitionFormSequenceIdValue == null) {
            innerProperties.setFormDefinitionFormSequenceId(outerFormSequenceIdValue);
        }
        else if (innerFormDefinitionFormSequenceIdValue != outerFormSequenceIdValue 
            && (innerFormDefinitionFormSequenceIdValue == null || innerFormDefinitionFormSequenceIdValue != null && !innerFormDefinitionFormSequenceIdValue.equals(outerFormSequenceIdValue))) {
            throw DomainError.named("inconsistentId", "Outer %1$s %2$s NOT equals inner %3$s %4$s", outerFormSequenceIdName, outerFormSequenceIdValue, innerFormDefinitionFormSequenceIdName, innerFormDefinitionFormSequenceIdValue);
        }
    }// END throwOnInconsistentCommands /////////////////////


    ////////////////////////

    protected FormDefinitionEvent.FormDefinitionStateCreated newFormDefinitionStateCreated(Long version, String commandId, String requesterId) {
        FormDefinitionEventId stateEventId = new FormDefinitionEventId(this.state.getFormSequenceId(), version);
        FormDefinitionEvent.FormDefinitionStateCreated e = newFormDefinitionStateCreated(stateEventId);
        ((AbstractFormDefinitionEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FormDefinitionEvent.FormDefinitionStateMergePatched newFormDefinitionStateMergePatched(Long version, String commandId, String requesterId) {
        FormDefinitionEventId stateEventId = new FormDefinitionEventId(this.state.getFormSequenceId(), version);
        FormDefinitionEvent.FormDefinitionStateMergePatched e = newFormDefinitionStateMergePatched(stateEventId);
        ((AbstractFormDefinitionEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FormDefinitionEvent.FormDefinitionStateDeleted newFormDefinitionStateDeleted(Long version, String commandId, String requesterId) {
        FormDefinitionEventId stateEventId = new FormDefinitionEventId(this.state.getFormSequenceId(), version);
        FormDefinitionEvent.FormDefinitionStateDeleted e = newFormDefinitionStateDeleted(stateEventId);
        ((AbstractFormDefinitionEvent)e).setCommandId(commandId);
        e.setCreatedBy(requesterId);
        e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));
        return e;
    }

    protected FormDefinitionEvent.FormDefinitionStateCreated newFormDefinitionStateCreated(FormDefinitionEventId stateEventId) {
        return new AbstractFormDefinitionEvent.SimpleFormDefinitionStateCreated(stateEventId);
    }

    protected FormDefinitionEvent.FormDefinitionStateMergePatched newFormDefinitionStateMergePatched(FormDefinitionEventId stateEventId) {
        return new AbstractFormDefinitionEvent.SimpleFormDefinitionStateMergePatched(stateEventId);
    }

    protected FormDefinitionEvent.FormDefinitionStateDeleted newFormDefinitionStateDeleted(FormDefinitionEventId stateEventId) {
        return new AbstractFormDefinitionEvent.SimpleFormDefinitionStateDeleted(stateEventId);
    }

    protected FormPageDefinitionEvent.FormPageDefinitionStateCreated newFormPageDefinitionStateCreated(FormPageDefinitionEventId stateEventId) {
        return new AbstractFormPageDefinitionEvent.SimpleFormPageDefinitionStateCreated(stateEventId);
    }

    protected FormPageDefinitionEvent.FormPageDefinitionStateMergePatched newFormPageDefinitionStateMergePatched(FormPageDefinitionEventId stateEventId) {
        return new AbstractFormPageDefinitionEvent.SimpleFormPageDefinitionStateMergePatched(stateEventId);
    }

    protected FormPageDefinitionEvent.FormPageDefinitionStateRemoved newFormPageDefinitionStateRemoved(FormPageDefinitionEventId stateEventId) {
        return new AbstractFormPageDefinitionEvent.SimpleFormPageDefinitionStateRemoved(stateEventId);
    }


    public static class SimpleFormDefinitionAggregate extends AbstractFormDefinitionAggregate {
        public SimpleFormDefinitionAggregate(FormDefinitionState state) {
            super(state);
        }

        @Override
        public void defineFormWithFirstPage(String formId, String contractAddress, String storeAccountAddress, String pageName, String moveStateTableFieldName, String moveStateStructName, String moveSubmitEventHandleFieldName, String moveUpdateEventHandleFieldName, String moveSubmitEventStructName, String moveUpdateEventStructName, Long offChainVersion, String commandId, String requesterId, FormDefinitionCommands.DefineFormWithFirstPage c) {
            java.util.function.Supplier<FormDefinitionEvent.FormWithFirstPageDefined> eventFactory = () -> newFormWithFirstPageDefined(formId, contractAddress, storeAccountAddress, pageName, moveStateTableFieldName, moveStateStructName, moveSubmitEventHandleFieldName, moveUpdateEventHandleFieldName, moveSubmitEventStructName, moveUpdateEventStructName, offChainVersion, commandId, requesterId);
            FormDefinitionEvent.FormWithFirstPageDefined e;
            try {
                e = verifyDefineFormWithFirstPage(eventFactory, formId, contractAddress, storeAccountAddress, pageName, moveStateTableFieldName, moveStateStructName, moveSubmitEventHandleFieldName, moveUpdateEventHandleFieldName, moveSubmitEventStructName, moveUpdateEventStructName, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            apply(e);
        }

        protected FormDefinitionEvent.FormWithFirstPageDefined verifyDefineFormWithFirstPage(java.util.function.Supplier<FormDefinitionEvent.FormWithFirstPageDefined> eventFactory, String formId, String contractAddress, String storeAccountAddress, String pageName, String moveStateTableFieldName, String moveStateStructName, String moveSubmitEventHandleFieldName, String moveUpdateEventHandleFieldName, String moveSubmitEventStructName, String moveUpdateEventStructName, FormDefinitionCommands.DefineFormWithFirstPage c) {
            String FormId = formId;
            String ContractAddress = contractAddress;
            String StoreAccountAddress = storeAccountAddress;
            String PageName = pageName;
            String MoveStateTableFieldName = moveStateTableFieldName;
            String MoveStateStructName = moveStateStructName;
            String MoveSubmitEventHandleFieldName = moveSubmitEventHandleFieldName;
            String MoveUpdateEventHandleFieldName = moveUpdateEventHandleFieldName;
            String MoveSubmitEventStructName = moveSubmitEventStructName;
            String MoveUpdateEventStructName = moveUpdateEventStructName;

            FormDefinitionEvent.FormWithFirstPageDefined e = (FormDefinitionEvent.FormWithFirstPageDefined) ((DefineFormWithFirstPageVerification) DefineFormWithFirstPageLogic::verify).verify(
                    eventFactory, getState(), formId, contractAddress, storeAccountAddress, pageName, moveStateTableFieldName, moveStateStructName, moveSubmitEventHandleFieldName, moveUpdateEventHandleFieldName, moveSubmitEventStructName, moveUpdateEventStructName, VerificationContext.forCommand(c));

//package org.test.aptosformsdemo.domain.formdefinition;
//
//public class DefineFormWithFirstPageLogic {
//    public static FormDefinitionEvent.FormWithFirstPageDefined verify(java.util.function.Supplier<FormDefinitionEvent.FormWithFirstPageDefined> eventFactory, FormDefinitionState formDefinitionState, String formId, String contractAddress, String storeAccountAddress, String pageName, String moveStateTableFieldName, String moveStateStructName, String moveSubmitEventHandleFieldName, String moveUpdateEventHandleFieldName, String moveSubmitEventStructName, String moveUpdateEventStructName, VerificationContext verificationContext) {
//    }
//}

            return e;
        }
           

        public interface DefineFormWithFirstPageVerification {
            FormDefinitionEvent.FormWithFirstPageDefined verify(java.util.function.Supplier<FormDefinitionEvent.FormWithFirstPageDefined> eventFactory, FormDefinitionState formDefinitionState, String formId, String contractAddress, String storeAccountAddress, String pageName, String moveStateTableFieldName, String moveStateStructName, String moveSubmitEventHandleFieldName, String moveUpdateEventHandleFieldName, String moveSubmitEventStructName, String moveUpdateEventStructName, VerificationContext verificationContext);
        }

        protected AbstractFormDefinitionEvent.FormWithFirstPageDefined newFormWithFirstPageDefined(String formId, String contractAddress, String storeAccountAddress, String pageName, String moveStateTableFieldName, String moveStateStructName, String moveSubmitEventHandleFieldName, String moveUpdateEventHandleFieldName, String moveSubmitEventStructName, String moveUpdateEventStructName, Long offChainVersion, String commandId, String requesterId) {
            FormDefinitionEventId eventId = new FormDefinitionEventId(getState().getFormSequenceId(), offChainVersion);
            AbstractFormDefinitionEvent.FormWithFirstPageDefined e = new AbstractFormDefinitionEvent.FormWithFirstPageDefined();

            e.getDynamicProperties().put("formId", formId);
            e.getDynamicProperties().put("contractAddress", contractAddress);
            e.getDynamicProperties().put("storeAccountAddress", storeAccountAddress);
            e.getDynamicProperties().put("pageName", pageName);
            e.getDynamicProperties().put("moveStateTableFieldName", moveStateTableFieldName);
            e.getDynamicProperties().put("moveStateStructName", moveStateStructName);
            e.getDynamicProperties().put("moveSubmitEventHandleFieldName", moveSubmitEventHandleFieldName);
            e.getDynamicProperties().put("moveUpdateEventHandleFieldName", moveUpdateEventHandleFieldName);
            e.getDynamicProperties().put("moveSubmitEventStructName", moveSubmitEventStructName);
            e.getDynamicProperties().put("moveUpdateEventStructName", moveUpdateEventStructName);

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((OffsetDateTime)ApplicationContext.current.getTimestampService().now(OffsetDateTime.class));

            e.setFormDefinitionEventId(eventId);
            return e;
        }

    }

}

