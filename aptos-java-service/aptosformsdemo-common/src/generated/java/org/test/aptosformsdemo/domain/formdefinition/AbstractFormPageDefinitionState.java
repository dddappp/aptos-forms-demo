// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.domain.formdefinition;

import java.util.*;
import java.math.*;
import java.time.OffsetDateTime;
import org.test.aptosformsdemo.domain.*;
import org.test.aptosformsdemo.specialization.*;
import org.test.aptosformsdemo.domain.formdefinition.FormPageDefinitionEvent.*;

public abstract class AbstractFormPageDefinitionState implements FormPageDefinitionState.SqlFormPageDefinitionState {

    private FormDefinitionFormPageDefinitionId formDefinitionFormPageDefinitionId = new FormDefinitionFormPageDefinitionId();

    public FormDefinitionFormPageDefinitionId getFormDefinitionFormPageDefinitionId() {
        return this.formDefinitionFormPageDefinitionId;
    }

    public void setFormDefinitionFormPageDefinitionId(FormDefinitionFormPageDefinitionId formDefinitionFormPageDefinitionId) {
        this.formDefinitionFormPageDefinitionId = formDefinitionFormPageDefinitionId;
    }

    private transient FormDefinitionState formDefinitionState;

    public FormDefinitionState getFormDefinitionState() {
        return formDefinitionState;
    }

    public void setFormDefinitionState(FormDefinitionState s) {
        formDefinitionState = s;
    }
    
    private FormDefinitionState protectedFormDefinitionState;

    protected FormDefinitionState getProtectedFormDefinitionState() {
        return protectedFormDefinitionState;
    }

    protected void setProtectedFormDefinitionState(FormDefinitionState protectedFormDefinitionState) {
        this.protectedFormDefinitionState = protectedFormDefinitionState;
    }

    public Long getFormDefinitionFormSequenceId() {
        return this.getFormDefinitionFormPageDefinitionId().getFormDefinitionFormSequenceId();
    }
        
    public void setFormDefinitionFormSequenceId(Long formDefinitionFormSequenceId) {
        this.getFormDefinitionFormPageDefinitionId().setFormDefinitionFormSequenceId(formDefinitionFormSequenceId);
    }

    public Integer getPageNumber() {
        return this.getFormDefinitionFormPageDefinitionId().getPageNumber();
    }
        
    public void setPageNumber(Integer pageNumber) {
        this.getFormDefinitionFormPageDefinitionId().setPageNumber(pageNumber);
    }

    private String pageName;

    public String getPageName() {
        return this.pageName;
    }

    public void setPageName(String pageName) {
        this.pageName = pageName;
    }

    private String moveStateTableFieldName;

    public String getMoveStateTableFieldName() {
        return this.moveStateTableFieldName;
    }

    public void setMoveStateTableFieldName(String moveStateTableFieldName) {
        this.moveStateTableFieldName = moveStateTableFieldName;
    }

    private String moveStateStructName;

    public String getMoveStateStructName() {
        return this.moveStateStructName;
    }

    public void setMoveStateStructName(String moveStateStructName) {
        this.moveStateStructName = moveStateStructName;
    }

    private String moveSubmitEventHandleFieldName;

    public String getMoveSubmitEventHandleFieldName() {
        return this.moveSubmitEventHandleFieldName;
    }

    public void setMoveSubmitEventHandleFieldName(String moveSubmitEventHandleFieldName) {
        this.moveSubmitEventHandleFieldName = moveSubmitEventHandleFieldName;
    }

    private String moveUpdateEventHandleFieldName;

    public String getMoveUpdateEventHandleFieldName() {
        return this.moveUpdateEventHandleFieldName;
    }

    public void setMoveUpdateEventHandleFieldName(String moveUpdateEventHandleFieldName) {
        this.moveUpdateEventHandleFieldName = moveUpdateEventHandleFieldName;
    }

    private String moveSubmitEventStructName;

    public String getMoveSubmitEventStructName() {
        return this.moveSubmitEventStructName;
    }

    public void setMoveSubmitEventStructName(String moveSubmitEventStructName) {
        this.moveSubmitEventStructName = moveSubmitEventStructName;
    }

    private String moveUpdateEventStructName;

    public String getMoveUpdateEventStructName() {
        return this.moveUpdateEventStructName;
    }

    public void setMoveUpdateEventStructName(String moveUpdateEventStructName) {
        this.moveUpdateEventStructName = moveUpdateEventStructName;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }


    public AbstractFormPageDefinitionState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getPageNumber().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof FormPageDefinitionState) {
            return Objects.equals(this.getPageNumber(), ((FormPageDefinitionState)obj).getPageNumber());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof FormPageDefinitionStateCreated) {
            when((FormPageDefinitionStateCreated) e);
        } else if (e instanceof FormPageDefinitionStateMergePatched) {
            when((FormPageDefinitionStateMergePatched) e);
        } else if (e instanceof FormPageDefinitionStateRemoved) {
            when((FormPageDefinitionStateRemoved) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(FormPageDefinitionStateCreated e) {
        throwOnWrongEvent(e);

        this.setPageName(e.getPageName());
        this.setMoveStateTableFieldName(e.getMoveStateTableFieldName());
        this.setMoveStateStructName(e.getMoveStateStructName());
        this.setMoveSubmitEventHandleFieldName(e.getMoveSubmitEventHandleFieldName());
        this.setMoveUpdateEventHandleFieldName(e.getMoveUpdateEventHandleFieldName());
        this.setMoveSubmitEventStructName(e.getMoveSubmitEventStructName());
        this.setMoveUpdateEventStructName(e.getMoveUpdateEventStructName());
        this.setActive(e.getActive());

        this.setDeleted(false);

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    public void merge(FormPageDefinitionState s) {
        if (s == this) {
            return;
        }
        this.setPageName(s.getPageName());
        this.setMoveStateTableFieldName(s.getMoveStateTableFieldName());
        this.setMoveStateStructName(s.getMoveStateStructName());
        this.setMoveSubmitEventHandleFieldName(s.getMoveSubmitEventHandleFieldName());
        this.setMoveUpdateEventHandleFieldName(s.getMoveUpdateEventHandleFieldName());
        this.setMoveSubmitEventStructName(s.getMoveSubmitEventStructName());
        this.setMoveUpdateEventStructName(s.getMoveUpdateEventStructName());
        this.setActive(s.getActive());
    }

    public void when(FormPageDefinitionStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getPageName() == null) {
            if (e.getIsPropertyPageNameRemoved() != null && e.getIsPropertyPageNameRemoved()) {
                this.setPageName(null);
            }
        } else {
            this.setPageName(e.getPageName());
        }
        if (e.getMoveStateTableFieldName() == null) {
            if (e.getIsPropertyMoveStateTableFieldNameRemoved() != null && e.getIsPropertyMoveStateTableFieldNameRemoved()) {
                this.setMoveStateTableFieldName(null);
            }
        } else {
            this.setMoveStateTableFieldName(e.getMoveStateTableFieldName());
        }
        if (e.getMoveStateStructName() == null) {
            if (e.getIsPropertyMoveStateStructNameRemoved() != null && e.getIsPropertyMoveStateStructNameRemoved()) {
                this.setMoveStateStructName(null);
            }
        } else {
            this.setMoveStateStructName(e.getMoveStateStructName());
        }
        if (e.getMoveSubmitEventHandleFieldName() == null) {
            if (e.getIsPropertyMoveSubmitEventHandleFieldNameRemoved() != null && e.getIsPropertyMoveSubmitEventHandleFieldNameRemoved()) {
                this.setMoveSubmitEventHandleFieldName(null);
            }
        } else {
            this.setMoveSubmitEventHandleFieldName(e.getMoveSubmitEventHandleFieldName());
        }
        if (e.getMoveUpdateEventHandleFieldName() == null) {
            if (e.getIsPropertyMoveUpdateEventHandleFieldNameRemoved() != null && e.getIsPropertyMoveUpdateEventHandleFieldNameRemoved()) {
                this.setMoveUpdateEventHandleFieldName(null);
            }
        } else {
            this.setMoveUpdateEventHandleFieldName(e.getMoveUpdateEventHandleFieldName());
        }
        if (e.getMoveSubmitEventStructName() == null) {
            if (e.getIsPropertyMoveSubmitEventStructNameRemoved() != null && e.getIsPropertyMoveSubmitEventStructNameRemoved()) {
                this.setMoveSubmitEventStructName(null);
            }
        } else {
            this.setMoveSubmitEventStructName(e.getMoveSubmitEventStructName());
        }
        if (e.getMoveUpdateEventStructName() == null) {
            if (e.getIsPropertyMoveUpdateEventStructNameRemoved() != null && e.getIsPropertyMoveUpdateEventStructNameRemoved()) {
                this.setMoveUpdateEventStructName(null);
            }
        } else {
            this.setMoveUpdateEventStructName(e.getMoveUpdateEventStructName());
        }
        if (e.getActive() == null) {
            if (e.getIsPropertyActiveRemoved() != null && e.getIsPropertyActiveRemoved()) {
                this.setActive(null);
            }
        } else {
            this.setActive(e.getActive());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void when(FormPageDefinitionStateRemoved e) {
        throwOnWrongEvent(e);

        this.setDeleted(true);
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(FormPageDefinitionEvent event) {
        Long stateEntityIdFormDefinitionFormSequenceId = this.getFormDefinitionFormPageDefinitionId().getFormDefinitionFormSequenceId();
        Long eventEntityIdFormDefinitionFormSequenceId = ((FormPageDefinitionEvent.SqlFormPageDefinitionEvent)event).getFormPageDefinitionEventId().getFormDefinitionFormSequenceId();
        if (!stateEntityIdFormDefinitionFormSequenceId.equals(eventEntityIdFormDefinitionFormSequenceId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id FormDefinitionFormSequenceId %1$s in state but entity id FormDefinitionFormSequenceId %2$s in event", stateEntityIdFormDefinitionFormSequenceId, eventEntityIdFormDefinitionFormSequenceId);
        }

        Integer stateEntityIdPageNumber = this.getFormDefinitionFormPageDefinitionId().getPageNumber();
        Integer eventEntityIdPageNumber = ((FormPageDefinitionEvent.SqlFormPageDefinitionEvent)event).getFormPageDefinitionEventId().getPageNumber();
        if (!stateEntityIdPageNumber.equals(eventEntityIdPageNumber)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id PageNumber %1$s in state but entity id PageNumber %2$s in event", stateEntityIdPageNumber, eventEntityIdPageNumber);
        }


        if (getForReapplying()) { return; }
        FormPageDefinitionStateEvent stateEvent = event instanceof FormPageDefinitionStateEvent ? (FormPageDefinitionStateEvent)event : null;
        if (stateEvent == null) { return; }

        Long stateVersion = this.getOffChainVersion();
        Long stateEventStateVersion = stateEvent.getOffChainVersion();
        //if (stateEventStateVersion == null) {
        stateEventStateVersion = stateVersion == null ? FormPageDefinitionState.VERSION_NULL : stateVersion;
        stateEvent.setOffChainVersion(stateEventStateVersion);
        //}
        //if (!(stateVersion == null && stateEventStateVersion.equals(FormPageDefinitionState.VERSION_NULL)) && !stateEventStateVersion.equals(stateVersion))
        //{
        //    throw DomainError.named("concurrencyConflict", "Conflict between stateVersion (%1$s) and stateEventStateVersion (%2$s)", stateVersion, stateEventStateVersion);
        //}

    }


    public static class SimpleFormPageDefinitionState extends AbstractFormPageDefinitionState {

        public SimpleFormPageDefinitionState() {
        }

        public static SimpleFormPageDefinitionState newForReapplying() {
            SimpleFormPageDefinitionState s = new SimpleFormPageDefinitionState();
            s.initializeForReapplying();
            return s;
        }

    }



}

