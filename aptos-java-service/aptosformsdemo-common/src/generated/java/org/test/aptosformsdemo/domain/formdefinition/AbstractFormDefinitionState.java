// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.domain.formdefinition;

import java.util.*;
import java.math.*;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import org.test.aptosformsdemo.domain.*;
import org.test.aptosformsdemo.specialization.*;
import org.test.aptosformsdemo.domain.formdefinition.FormDefinitionEvent.*;

public abstract class AbstractFormDefinitionState implements FormDefinitionState.SqlFormDefinitionState {

    private Long formSequenceId;

    public Long getFormSequenceId() {
        return this.formSequenceId;
    }

    public void setFormSequenceId(Long formSequenceId) {
        this.formSequenceId = formSequenceId;
    }

    private String formId;

    public String getFormId() {
        return this.formId;
    }

    public void setFormId(String formId) {
        this.formId = formId;
    }

    private String contractAddress;

    public String getContractAddress() {
        return this.contractAddress;
    }

    public void setContractAddress(String contractAddress) {
        this.contractAddress = contractAddress;
    }

    private String storeAccountAddress;

    public String getStoreAccountAddress() {
        return this.storeAccountAddress;
    }

    public void setStoreAccountAddress(String storeAccountAddress) {
        this.storeAccountAddress = storeAccountAddress;
    }

    private String startPageName;

    public String getStartPageName() {
        return this.startPageName;
    }

    public void setStartPageName(String startPageName) {
        this.startPageName = startPageName;
    }

    private BigInteger version;

    public BigInteger getVersion() {
        return this.version;
    }

    public void setVersion(BigInteger version) {
        this.version = version;
    }

    private Long offChainVersion;

    public Long getOffChainVersion() {
        return this.offChainVersion;
    }

    public void setOffChainVersion(Long offChainVersion) {
        this.offChainVersion = offChainVersion;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private OffsetDateTime createdAt;

    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    private String updatedBy;

    public String getUpdatedBy() {
        return this.updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    private OffsetDateTime updatedAt;

    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    private Boolean active;

    public Boolean getActive() {
        return this.active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    private Boolean deleted;

    public Boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    public boolean isStateUnsaved() {
        return this.getOffChainVersion() == null;
    }

    private Boolean stateReadOnly;

    public Boolean getStateReadOnly() { return this.stateReadOnly; }

    public void setStateReadOnly(Boolean readOnly) { this.stateReadOnly = readOnly; }

    private boolean forReapplying;

    public boolean getForReapplying() {
        return forReapplying;
    }

    public void setForReapplying(boolean forReapplying) {
        this.forReapplying = forReapplying;
    }

    public AbstractFormDefinitionState(List<Event> events) {
        initializeForReapplying();
        if (events != null && events.size() > 0) {
            this.setFormSequenceId(((FormDefinitionEvent.SqlFormDefinitionEvent) events.get(0)).getFormDefinitionEventId().getFormSequenceId());
            for (Event e : events) {
                mutate(e);
                this.setOffChainVersion((this.getOffChainVersion() == null ? FormDefinitionState.VERSION_NULL : this.getOffChainVersion()) + 1);
            }
        }
    }


    public AbstractFormDefinitionState() {
        initializeProperties();
    }

    protected void initializeForReapplying() {
        this.forReapplying = true;

        initializeProperties();
    }
    
    protected void initializeProperties() {
    }

    @Override
    public int hashCode() {
        return getFormSequenceId().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) { return true; }
        if (obj instanceof FormDefinitionState) {
            return Objects.equals(this.getFormSequenceId(), ((FormDefinitionState)obj).getFormSequenceId());
        }
        return false;
    }


    public void mutate(Event e) {
        setStateReadOnly(false);
        if (e instanceof FormDefinitionStateCreated) {
            when((FormDefinitionStateCreated) e);
        } else if (e instanceof FormDefinitionStateMergePatched) {
            when((FormDefinitionStateMergePatched) e);
        } else if (e instanceof FormDefinitionStateDeleted) {
            when((FormDefinitionStateDeleted) e);
        } else {
            throw new UnsupportedOperationException(String.format("Unsupported event type: %1$s", e.getClass().getName()));
        }
    }

    public void when(FormDefinitionStateCreated e) {
        throwOnWrongEvent(e);

        this.setFormId(e.getFormId());
        this.setContractAddress(e.getContractAddress());
        this.setStoreAccountAddress(e.getStoreAccountAddress());
        this.setStartPageName(e.getStartPageName());
        this.setVersion(e.getVersion());
        this.setActive(e.getActive());

        this.setDeleted(false);

        this.setCreatedBy(e.getCreatedBy());
        this.setCreatedAt(e.getCreatedAt());

    }

    protected void merge(FormDefinitionState s) {
        if (s == this) {
            return;
        }
        this.setFormId(s.getFormId());
        this.setContractAddress(s.getContractAddress());
        this.setStoreAccountAddress(s.getStoreAccountAddress());
        this.setStartPageName(s.getStartPageName());
        this.setVersion(s.getVersion());
        this.setActive(s.getActive());
    }

    public void when(FormDefinitionStateMergePatched e) {
        throwOnWrongEvent(e);

        if (e.getFormId() == null) {
            if (e.getIsPropertyFormIdRemoved() != null && e.getIsPropertyFormIdRemoved()) {
                this.setFormId(null);
            }
        } else {
            this.setFormId(e.getFormId());
        }
        if (e.getContractAddress() == null) {
            if (e.getIsPropertyContractAddressRemoved() != null && e.getIsPropertyContractAddressRemoved()) {
                this.setContractAddress(null);
            }
        } else {
            this.setContractAddress(e.getContractAddress());
        }
        if (e.getStoreAccountAddress() == null) {
            if (e.getIsPropertyStoreAccountAddressRemoved() != null && e.getIsPropertyStoreAccountAddressRemoved()) {
                this.setStoreAccountAddress(null);
            }
        } else {
            this.setStoreAccountAddress(e.getStoreAccountAddress());
        }
        if (e.getStartPageName() == null) {
            if (e.getIsPropertyStartPageNameRemoved() != null && e.getIsPropertyStartPageNameRemoved()) {
                this.setStartPageName(null);
            }
        } else {
            this.setStartPageName(e.getStartPageName());
        }
        if (e.getVersion() == null) {
            if (e.getIsPropertyVersionRemoved() != null && e.getIsPropertyVersionRemoved()) {
                this.setVersion(null);
            }
        } else {
            this.setVersion(e.getVersion());
        }
        if (e.getActive() == null) {
            if (e.getIsPropertyActiveRemoved() != null && e.getIsPropertyActiveRemoved()) {
                this.setActive(null);
            }
        } else {
            this.setActive(e.getActive());
        }

        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void when(FormDefinitionStateDeleted e) {
        throwOnWrongEvent(e);

        this.setDeleted(true);
        this.setUpdatedBy(e.getCreatedBy());
        this.setUpdatedAt(e.getCreatedAt());

    }

    public void save() {
    }

    protected void throwOnWrongEvent(FormDefinitionEvent event) {
        Long stateEntityId = this.getFormSequenceId(); // Aggregate Id
        Long eventEntityId = ((FormDefinitionEvent.SqlFormDefinitionEvent)event).getFormDefinitionEventId().getFormSequenceId(); // EntityBase.Aggregate.GetEventIdPropertyIdName();
        if (!stateEntityId.equals(eventEntityId)) {
            throw DomainError.named("mutateWrongEntity", "Entity Id %1$s in state but entity id %2$s in event", stateEntityId, eventEntityId);
        }


        Long stateVersion = this.getOffChainVersion();
        Long eventVersion = ((FormDefinitionEvent.SqlFormDefinitionEvent)event).getFormDefinitionEventId().getOffChainVersion();// Event Version
        if (eventVersion == null) {
            throw new NullPointerException("event.getFormDefinitionEventId().getOffChainVersion() == null");
        }
        if (!(stateVersion == null && eventVersion.equals(FormDefinitionState.VERSION_NULL)) && !eventVersion.equals(stateVersion)) {
            throw DomainError.named("concurrencyConflict", "Conflict between state version (%1$s) and event version (%2$s)", stateVersion, eventVersion);
        }

    }


    public static class SimpleFormDefinitionState extends AbstractFormDefinitionState {

        public SimpleFormDefinitionState() {
        }

        public SimpleFormDefinitionState(List<Event> events) {
            super(events);
        }

        public static SimpleFormDefinitionState newForReapplying() {
            SimpleFormDefinitionState s = new SimpleFormDefinitionState();
            s.initializeForReapplying();
            return s;
        }

    }



}

