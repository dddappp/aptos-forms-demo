// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.domain.formdefinition;

import java.time.OffsetDateTime;
import org.test.aptosformsdemo.domain.*;

public class CreateOrMergePatchFormDefinitionDto extends AbstractFormDefinitionCommandDto implements FormDefinitionCommand.CreateOrMergePatchFormDefinition {

    /**
     * Form Id
     */
    private String formId;

    public String getFormId()
    {
        return this.formId;
    }

    public void setFormId(String formId)
    {
        this.formId = formId;
    }

    /**
     * Contract Address
     */
    private String contractAddress;

    public String getContractAddress()
    {
        return this.contractAddress;
    }

    public void setContractAddress(String contractAddress)
    {
        this.contractAddress = contractAddress;
    }

    /**
     * Store Account Address
     */
    private String storeAccountAddress;

    public String getStoreAccountAddress()
    {
        return this.storeAccountAddress;
    }

    public void setStoreAccountAddress(String storeAccountAddress)
    {
        this.storeAccountAddress = storeAccountAddress;
    }

    /**
     * Active
     */
    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }


    private CreateOrMergePatchFormPageDefinitionDto[] pageDefinitions = new CreateOrMergePatchFormPageDefinitionDto[0];

    public CreateOrMergePatchFormPageDefinitionDto[] getPageDefinitions()
    {
        return this.pageDefinitions;
    }

    public void setPageDefinitions(CreateOrMergePatchFormPageDefinitionDto[] pageDefinitions)
    {
        this.pageDefinitions = pageDefinitions;
    }

    private Boolean isPropertyFormIdRemoved;

    public Boolean getIsPropertyFormIdRemoved()
    {
        return this.isPropertyFormIdRemoved;
    }

    public void setIsPropertyFormIdRemoved(Boolean removed)
    {
        this.isPropertyFormIdRemoved = removed;
    }

    private Boolean isPropertyContractAddressRemoved;

    public Boolean getIsPropertyContractAddressRemoved()
    {
        return this.isPropertyContractAddressRemoved;
    }

    public void setIsPropertyContractAddressRemoved(Boolean removed)
    {
        this.isPropertyContractAddressRemoved = removed;
    }

    private Boolean isPropertyStoreAccountAddressRemoved;

    public Boolean getIsPropertyStoreAccountAddressRemoved()
    {
        return this.isPropertyStoreAccountAddressRemoved;
    }

    public void setIsPropertyStoreAccountAddressRemoved(Boolean removed)
    {
        this.isPropertyStoreAccountAddressRemoved = removed;
    }

    private Boolean isPropertyActiveRemoved;

    public Boolean getIsPropertyActiveRemoved()
    {
        return this.isPropertyActiveRemoved;
    }

    public void setIsPropertyActiveRemoved(Boolean removed)
    {
        this.isPropertyActiveRemoved = removed;
    }

    public void copyTo(CreateOrMergePatchFormDefinition command)
    {
        ((AbstractFormDefinitionCommandDto) this).copyTo(command);
        command.setFormId(this.getFormId());
        command.setContractAddress(this.getContractAddress());
        command.setStoreAccountAddress(this.getStoreAccountAddress());
        command.setActive(this.getActive());
    }

    public FormDefinitionCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            AbstractFormDefinitionCommand.SimpleCreateFormDefinition command = new AbstractFormDefinitionCommand.SimpleCreateFormDefinition();
            copyTo((AbstractFormDefinitionCommand.AbstractCreateFormDefinition) command);
            if (this.getPageDefinitions() != null) {
                for (CreateOrMergePatchFormPageDefinitionDto cmd : this.getPageDefinitions()) {
                    command.getPageDefinitions().add((FormPageDefinitionCommand.CreateFormPageDefinition) cmd.toCommand());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            AbstractFormDefinitionCommand.SimpleMergePatchFormDefinition command = new AbstractFormDefinitionCommand.SimpleMergePatchFormDefinition();
            copyTo((AbstractFormDefinitionCommand.SimpleMergePatchFormDefinition) command);
            if (this.getPageDefinitions() != null) {
                for (CreateOrMergePatchFormPageDefinitionDto cmd : this.getPageDefinitions()) {
                    command.getFormPageDefinitionCommands().add(cmd.toCommand());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public FormDefinitionCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            CreateFormDefinitionDto command = new CreateFormDefinitionDto();
            copyTo((CreateFormDefinition) command);
            if (this.getPageDefinitions() != null) {
                for (CreateOrMergePatchFormPageDefinitionDto cmd : this.getPageDefinitions()) {
                    if (cmd.getCommandType() == null) { cmd.setCommandType(COMMAND_TYPE_CREATE); }
                    command.getCreateFormPageDefinitionCommands().add((FormPageDefinitionCommand.CreateFormPageDefinition) cmd.toSubclass());
                }
            }
            return command;
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            MergePatchFormDefinitionDto command = new MergePatchFormDefinitionDto();
            copyTo((MergePatchFormDefinition) command);
            if (this.getPageDefinitions() != null) {
                for (CreateOrMergePatchFormPageDefinitionDto cmd : this.getPageDefinitions()) {
                    command.getFormPageDefinitionCommands().add(cmd.toSubclass());
                }
            }
            return command;
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    public void copyTo(CreateFormDefinition command)
    {
        copyTo((CreateOrMergePatchFormDefinition) command);
    }

    public void copyTo(MergePatchFormDefinition command)
    {
        copyTo((CreateOrMergePatchFormDefinition) command);
        command.setIsPropertyFormIdRemoved(this.getIsPropertyFormIdRemoved());
        command.setIsPropertyContractAddressRemoved(this.getIsPropertyContractAddressRemoved());
        command.setIsPropertyStoreAccountAddressRemoved(this.getIsPropertyStoreAccountAddressRemoved());
        command.setIsPropertyActiveRemoved(this.getIsPropertyActiveRemoved());
    }

    public static class CreateFormDefinitionDto extends CreateOrMergePatchFormDefinitionDto implements FormDefinitionCommand.CreateFormDefinition
    {
        public CreateFormDefinitionDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public FormDefinitionCommand.CreateFormDefinition toCreateFormDefinition()
        {
            return (FormDefinitionCommand.CreateFormDefinition) toCommand();
        }


        @Override
        public CreateFormPageDefinitionCommandCollection getCreateFormPageDefinitionCommands() {
            return new CreateFormPageDefinitionCommandCollection() {
                @Override
                public void add(FormPageDefinitionCommand.CreateFormPageDefinition c) {
                    java.util.List<CreateOrMergePatchFormPageDefinitionDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getPageDefinitions()));
                    list.add((CreateOrMergePatchFormPageDefinitionDto) c);
                    setPageDefinitions(list.toArray(new CreateOrMergePatchFormPageDefinitionDto[0]));
                }

                @Override
                public void remove(FormPageDefinitionCommand.CreateFormPageDefinition c) {
                    java.util.List<CreateOrMergePatchFormPageDefinitionDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getPageDefinitions()));
                    list.remove((CreateOrMergePatchFormPageDefinitionDto) c);
                    setPageDefinitions(list.toArray(new CreateOrMergePatchFormPageDefinitionDto[0]));
                }

                @Override
                public void clear() {
                    setPageDefinitions(new CreateOrMergePatchFormPageDefinitionDto[]{});
                }

                @Override
                public java.util.Iterator<FormPageDefinitionCommand.CreateFormPageDefinition> iterator() {
                    return java.util.Arrays.stream(getPageDefinitions())
                            .map(e -> {if (e.getCommandType()==null) e.setCommandType(COMMAND_TYPE_CREATE);return (FormPageDefinitionCommand.CreateFormPageDefinition) e.toSubclass();}).iterator();
                }
            };
        }

        @Override
        public FormPageDefinitionCommand.CreateFormPageDefinition newCreateFormPageDefinition() {
            return new CreateOrMergePatchFormPageDefinitionDto.CreateFormPageDefinitionDto();
        }

    }

    public static class MergePatchFormDefinitionDto extends CreateOrMergePatchFormDefinitionDto implements FormDefinitionCommand.MergePatchFormDefinition
    {
        public MergePatchFormDefinitionDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public FormDefinitionCommand.MergePatchFormDefinition toMergePatchFormDefinition()
        {
            return (FormDefinitionCommand.MergePatchFormDefinition) toCommand();
        }


        @Override
        public FormPageDefinitionCommandCollection getFormPageDefinitionCommands() {
            return new FormPageDefinitionCommandCollection() {
                @Override
                public void add(FormPageDefinitionCommand c) {
                    java.util.List<CreateOrMergePatchFormPageDefinitionDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getPageDefinitions()));
                    list.add((CreateOrMergePatchFormPageDefinitionDto) c);
                    setPageDefinitions(list.toArray(new CreateOrMergePatchFormPageDefinitionDto[0]));
                }

                @Override
                public void remove(FormPageDefinitionCommand c) {
                    java.util.List<CreateOrMergePatchFormPageDefinitionDto> list = new java.util.ArrayList<>(java.util.Arrays.asList(getPageDefinitions()));
                    list.remove((CreateOrMergePatchFormPageDefinitionDto) c);
                    setPageDefinitions(list.toArray(new CreateOrMergePatchFormPageDefinitionDto[0]));
                }

                @Override
                public void clear() {
                    setPageDefinitions(new CreateOrMergePatchFormPageDefinitionDto[]{});
                }

                @Override
                public java.util.Iterator<FormPageDefinitionCommand> iterator() {
                    return java.util.Arrays.stream(getPageDefinitions())
                            .map(e -> (FormPageDefinitionCommand) e.toSubclass()).iterator();
                }
            };
        }

        @Override
        public FormPageDefinitionCommand.CreateFormPageDefinition newCreateFormPageDefinition() {
            return new CreateOrMergePatchFormPageDefinitionDto.CreateFormPageDefinitionDto();
        }

        @Override
        public FormPageDefinitionCommand.MergePatchFormPageDefinition newMergePatchFormPageDefinition() {
            return new CreateOrMergePatchFormPageDefinitionDto.MergePatchFormPageDefinitionDto();
        }

        @Override
        public FormPageDefinitionCommand.RemoveFormPageDefinition newRemoveFormPageDefinition() {
            return new RemoveFormPageDefinitionDto();
        }

    }

}

