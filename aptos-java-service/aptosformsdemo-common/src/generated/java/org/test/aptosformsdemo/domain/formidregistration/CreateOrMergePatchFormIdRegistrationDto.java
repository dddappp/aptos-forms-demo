// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.domain.formidregistration;

import java.time.OffsetDateTime;
import org.test.aptosformsdemo.domain.*;

public class CreateOrMergePatchFormIdRegistrationDto extends AbstractFormIdRegistrationCommandDto implements FormIdRegistrationCommand.CreateOrMergePatchFormIdRegistration {

    /**
     * Form Id
     */
    private String formId;

    public String getFormId()
    {
        return this.formId;
    }

    public void setFormId(String formId)
    {
        this.formId = formId;
    }

    /**
     * Active
     */
    private Boolean active;

    public Boolean getActive()
    {
        return this.active;
    }

    public void setActive(Boolean active)
    {
        this.active = active;
    }


    private Boolean isPropertyFormIdRemoved;

    public Boolean getIsPropertyFormIdRemoved()
    {
        return this.isPropertyFormIdRemoved;
    }

    public void setIsPropertyFormIdRemoved(Boolean removed)
    {
        this.isPropertyFormIdRemoved = removed;
    }

    private Boolean isPropertyActiveRemoved;

    public Boolean getIsPropertyActiveRemoved()
    {
        return this.isPropertyActiveRemoved;
    }

    public void setIsPropertyActiveRemoved(Boolean removed)
    {
        this.isPropertyActiveRemoved = removed;
    }

    public FormIdRegistrationCommand toCommand()
    {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType())) {
            return toCreateFormIdRegistration();
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            return toMergePatchFormIdRegistration();
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }


    public FormIdRegistrationCommand toSubclass() {
        if (getCommandType() == null) {
            setCommandType(COMMAND_TYPE_MERGE_PATCH);
        }
        if (COMMAND_TYPE_CREATE.equals(getCommandType()) || null == getCommandType()) {
            return toCreateFormIdRegistration();
        } else if (COMMAND_TYPE_MERGE_PATCH.equals(getCommandType())) {
            return toMergePatchFormIdRegistration();
        } 
        throw new UnsupportedOperationException("Unknown command type:" + getCommandType());
    }

    protected FormIdRegistrationCommand.CreateFormIdRegistration toCreateFormIdRegistration() {
        return new FormIdRegistrationCommand.CreateFormIdRegistration() {
            @Override
            public Long getFormSequenceId() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getFormSequenceId();
            }

            @Override
            public void setFormSequenceId(Long p) {
                CreateOrMergePatchFormIdRegistrationDto.this.setFormSequenceId(p);
            }

            @Override
            public Long getOffChainVersion() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getOffChainVersion();
            }

            @Override
            public void setOffChainVersion(Long p) {
                CreateOrMergePatchFormIdRegistrationDto.this.setOffChainVersion(p);
            }

            @Override
            public String getCommandType() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getCommandType();
            }

            @Override
            public void setCommandType(String commandType) {
                 CreateOrMergePatchFormIdRegistrationDto.this.setCommandType(commandType);
            }

            @Override
            public String getCommandId() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getCommandId();
            }

            @Override
            public void setCommandId(String commandId) {
                CreateOrMergePatchFormIdRegistrationDto.this.setCommandId(commandId);
            }

            @Override
            public String getRequesterId() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getRequesterId();
            }

            @Override
            public void setRequesterId(String requesterId) {
                CreateOrMergePatchFormIdRegistrationDto.this.setRequesterId(requesterId);
            }

            @Override
            public java.util.Map<String, Object> getCommandContext() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getCommandContext();
            }

            @Override
            public String getFormId() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getFormId();
            }

            @Override
            public void setFormId(String p) {
                CreateOrMergePatchFormIdRegistrationDto.this.setFormId(p);
            }

            @Override
            public Boolean getActive() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getActive();
            }

            @Override
            public void setActive(Boolean p) {
                CreateOrMergePatchFormIdRegistrationDto.this.setActive(p);
            }


        };
    }

    protected FormIdRegistrationCommand.MergePatchFormIdRegistration toMergePatchFormIdRegistration() {
        return new FormIdRegistrationCommand.MergePatchFormIdRegistration() {
            @Override
            public Long getFormSequenceId() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getFormSequenceId();
            }

            @Override
            public void setFormSequenceId(Long p) {
                CreateOrMergePatchFormIdRegistrationDto.this.setFormSequenceId(p);
            }

            @Override
            public Long getOffChainVersion() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getOffChainVersion();
            }

            @Override
            public void setOffChainVersion(Long p) {
                CreateOrMergePatchFormIdRegistrationDto.this.setOffChainVersion(p);
            }

            @Override
            public String getCommandType() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getCommandType();
            }

            @Override
            public void setCommandType(String commandType) {
                 CreateOrMergePatchFormIdRegistrationDto.this.setCommandType(commandType);
            }

            @Override
            public String getCommandId() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getCommandId();
            }

            @Override
            public void setCommandId(String commandId) {
                CreateOrMergePatchFormIdRegistrationDto.this.setCommandId(commandId);
            }

            @Override
            public String getRequesterId() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getRequesterId();
            }

            @Override
            public void setRequesterId(String requesterId) {
                CreateOrMergePatchFormIdRegistrationDto.this.setRequesterId(requesterId);
            }

            @Override
            public java.util.Map<String, Object> getCommandContext() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getCommandContext();
            }

            @Override
            public String getFormId() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getFormId();
            }

            @Override
            public void setFormId(String p) {
                CreateOrMergePatchFormIdRegistrationDto.this.setFormId(p);
            }

            @Override
            public Boolean getActive() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getActive();
            }

            @Override
            public void setActive(Boolean p) {
                CreateOrMergePatchFormIdRegistrationDto.this.setActive(p);
            }

            @Override
            public Boolean getIsPropertyFormIdRemoved() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getIsPropertyFormIdRemoved();
            }

            @Override
            public void setIsPropertyFormIdRemoved(Boolean removed) {
                CreateOrMergePatchFormIdRegistrationDto.this.setIsPropertyFormIdRemoved(removed);
            }

            @Override
            public Boolean getIsPropertyActiveRemoved() {
                return CreateOrMergePatchFormIdRegistrationDto.this.getIsPropertyActiveRemoved();
            }

            @Override
            public void setIsPropertyActiveRemoved(Boolean removed) {
                CreateOrMergePatchFormIdRegistrationDto.this.setIsPropertyActiveRemoved(removed);
            }


        };
    }

    public static class CreateFormIdRegistrationDto extends CreateOrMergePatchFormIdRegistrationDto implements FormIdRegistrationCommand.CreateFormIdRegistration
    {
        public CreateFormIdRegistrationDto() {
            this.commandType = COMMAND_TYPE_CREATE;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_CREATE;
        }
        public FormIdRegistrationCommand.CreateFormIdRegistration toCreateFormIdRegistration()
        {
            return super.toCreateFormIdRegistration();
        }

    }

    public static class MergePatchFormIdRegistrationDto extends CreateOrMergePatchFormIdRegistrationDto implements FormIdRegistrationCommand.MergePatchFormIdRegistration
    {
        public MergePatchFormIdRegistrationDto() {
            this.commandType = COMMAND_TYPE_MERGE_PATCH;
        }

        @Override
        public String getCommandType() {
            return COMMAND_TYPE_MERGE_PATCH;
        }
        public FormIdRegistrationCommand.MergePatchFormIdRegistration toMergePatchFormIdRegistration()
        {
            return super.toMergePatchFormIdRegistration();
        }

    }

}

