// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.aptosformsdemo.domain.formdefinition;

import java.util.*;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import org.test.aptosformsdemo.domain.*;
import org.test.aptosformsdemo.domain.Command;
import org.test.aptosformsdemo.specialization.DomainError;

public interface FormDefinitionCommand extends Command {

    Long getFormSequenceId();

    void setFormSequenceId(Long formSequenceId);

    Long getOffChainVersion();

    void setOffChainVersion(Long offChainVersion);

    static void throwOnInvalidStateTransition(FormDefinitionState state, Command c) {
        if (state.getOffChainVersion() == null) {
            if (isCommandCreate((FormDefinitionCommand)c)) {
                return;
            }
            throw DomainError.named("premature", "Can't do anything to unexistent aggregate");
        }
        if (state.getDeleted() != null && state.getDeleted()) {
            throw DomainError.named("zombie", "Can't do anything to deleted aggregate.");
        }
        if (isCommandCreate((FormDefinitionCommand)c))
            throw DomainError.named("rebirth", "Can't create aggregate that already exists");
    }

    static boolean isCommandCreate(FormDefinitionCommand c) {
        if ((c instanceof FormDefinitionCommand.CreateFormDefinition) 
            && (COMMAND_TYPE_CREATE.equals(c.getCommandType()) || c.getOffChainVersion().equals(FormDefinitionState.VERSION_NULL)))
            return true;
        if ((c instanceof FormDefinitionCommand.MergePatchFormDefinition))
            return false;
        if ((c instanceof FormDefinitionCommand.DeleteFormDefinition))
            return false;
        if (c.getOffChainVersion().equals(FormDefinitionState.VERSION_NULL))
            return true;
        return false;
    }

    interface CreateOrMergePatchFormDefinition extends FormDefinitionCommand
    {

        String getFormId();

        void setFormId(String formId);

        String getContractAddress();

        void setContractAddress(String contractAddress);

        String getStoreAccountAddress();

        void setStoreAccountAddress(String storeAccountAddress);

        String getStartPageName();

        void setStartPageName(String startPageName);

        BigInteger getVersion();

        void setVersion(BigInteger version);

        Boolean getActive();

        void setActive(Boolean active);

    }

    interface CreateFormDefinition extends CreateOrMergePatchFormDefinition
    {
    }

    interface MergePatchFormDefinition extends CreateOrMergePatchFormDefinition
    {
        Boolean getIsPropertyFormIdRemoved();

        void setIsPropertyFormIdRemoved(Boolean removed);

        Boolean getIsPropertyContractAddressRemoved();

        void setIsPropertyContractAddressRemoved(Boolean removed);

        Boolean getIsPropertyStoreAccountAddressRemoved();

        void setIsPropertyStoreAccountAddressRemoved(Boolean removed);

        Boolean getIsPropertyStartPageNameRemoved();

        void setIsPropertyStartPageNameRemoved(Boolean removed);

        Boolean getIsPropertyVersionRemoved();

        void setIsPropertyVersionRemoved(Boolean removed);

        Boolean getIsPropertyActiveRemoved();

        void setIsPropertyActiveRemoved(Boolean removed);


    }

    interface DeleteFormDefinition extends FormDefinitionCommand
    {
    }

}

